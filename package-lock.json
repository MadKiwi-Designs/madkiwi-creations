<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MadKiwiCreations</title>
  <!-- Link to Baloo 2 font -->
  <link href="https://fonts.googleapis.com/css2?family=Baloo+2:wght@400..800&display=swap" rel="stylesheet">

  <style>
    body {
      margin: 0;
      padding: 0;
      /* Changed background to make sure the gradient is visible */
      background: linear-gradient(135deg, #39FF14, #FF0066);
      font-family: 'Baloo 2', cursive;
      color: white;
      text-align: center;
      /* Added min-height and Flexbox for potential vertical centering if needed */
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center; /* Center content horizontally */
      justify-content: center; /* Center content vertically */
    }

    .container {
      /* Removed padding-top as Flexbox is handling vertical centering */
      /* padding-top: 15vh; */
      width: 100%; /* Allow container to take full width */
      max-width: 800px; /* Optional: Limit maximum width */
      padding: 20px; /* Add some padding */
      box-sizing: border-box; /* Include padding in element's total width and height */
    }

    h1 {
      font-size: 3.5em;
      animation: bounce 1.2s ease-out forwards;
      margin-bottom: 20px; /* Add space below heading */
    }

    @keyframes bounce {
      0% { transform: scale(0.9); opacity: 0; } /* Added opacity for fade-in effect */
      50% { transform: scale(1.1); opacity: 1; }
      100% { transform: scale(1); opacity: 1; }
    }

    .lottie-container {
      margin-top: 50px;
      /* Changed width and height for better responsiveness */
      width: 80%; /* Relative width */
      max-width: 250px; /* Max width to match original size */
      height: auto; /* Height scales with width */
      margin-left: auto;
      margin-right: auto;
      cursor: pointer; /* Indicate it's interactive */
      transition: transform 0.3s ease-in-out; /* Optional: Add a slight scale animation on hover */
    }

    .lottie-container:hover {
      transform: scale(1.05); /* Slightly enlarges the container on hover */
    }

    .footer {
      margin-top: 60px;
      font-size: 1.1em;
      opacity: 0.8;
      margin-top: auto; /* Push footer to the bottom if Flexbox column is used */
      padding-bottom: 20px; /* Add padding at the bottom */
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Play. Create. Unleash.</h1>
    <div class="lottie-container">
      <!-- Lottie Player Script -->
      <script src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js"></script>
      <lottie-player
        src="https://cdn.lottielab.com/l/E7qffpujXuVFXM.json"
        background="transparent"
        speed="1"
        loop
        autoplay>
      </lottie-player>
    </div>
    <div class="footer">
      MadKiwiCreations is booting up... this canvas won't stay blank for long, What is MadKiwi up to now?ü•ùüí•
    </div>
  </div>

  <script>
    // Wait for the DOM to be fully loaded
    document.addEventListener('DOMContentLoaded', () => {
      const lottiePlayer = document.querySelector('lottie-player');

      if (!lottiePlayer) {
        console.error('Lottie player element not found!');
        return; // Stop if the player isn't there
      }

      // Store original settings if you plan to restore them
      const originalAutoplay = lottiePlayer.autoplay;
      const originalLoop = lottiePlayer.loop;

      // Set initial state (e.g., pause unless needed for scroll)
      // You might want to set autoplay="false" and loop="false" in the HTML directly
      // depending on your desired default state.
      // lottiePlayer.autoplay = false;
      // lottiePlayer.loop = false;


      // --- Hover Interaction ---
      let isHovering = false; // Flag to track hover state

      lottiePlayer.addEventListener('mouseover', () => {
        isHovering = true;
        // Only play on hover if not currently being controlled by scroll
        // This requires more sophisticated scroll state management
        // For simplicity here, it will play on hover regardless of scroll state
        lottiePlayer.play();
      });

      lottiePlayer.addEventListener('mouseout', () => {
        isHovering = false;
        // Option 1: Pause on mouse out
        // lottiePlayer.pause();

        // Option 2: Stop and reset to the beginning on mouse out
        lottiePlayer.stop();

        // If you stopped, you might want to immediately update based on scroll position
        // handleScroll(); // Call the scroll handler
      });


      // --- Scroll Interaction ---
      // This is for scrubbing the animation based on scroll position.
      // If you want it to play/pause when it enters/exits the viewport,
      // that requires different logic (e.g., using Intersection Observer).

      const handleScroll = () => {
        // Only update frame based on scroll if not currently hovering
        // This is a basic way to prioritize hover
        // if (isHovering) {
        //   return;
        // }

        const elementRect = lottiePlayer.getBoundingClientRect();
        const viewportHeight = window.innerHeight;

        // Calculate how much of the element is visible, considering it starts
        // influencing the animation as its bottom edge enters the viewport
        // and finishes when its top edge leaves the viewport.
        const scrollableHeight = viewportHeight + elementRect.height; // Total height range to influence animation
        const pixelsScrolledInElement = viewportHeight - elementRect.top; // Pixels scrolled relative to element's top

        // Normalize the scroll position to a value between 0 and 1
        // 0 when the bottom of the element is at the bottom of the viewport (just entering)
        // 1 when the top of the element is at the top of the viewport (just leaving)
        const scrollProgress = Math.max(0, Math.min(1, pixelsScrolledInElement / scrollableHeight));

        // Map the scroll progress (0 to 1) to the animation frame (0 to totalFrames)
        if (lottiePlayer.totalFrames) {
          const frame = Math.floor(scrollProgress * lottiePlayer.totalFrames);
          // Use .seek() to jump to a specific frame.
          // Adding a small delay or check might prevent choppy updates.
          lottiePlayer.seek(frame);

          // If you want it to pause when scroll control is active, you could do that here:
          // lottiePlayer.pause();
        }
      };

      // Listen for scroll events
      window.addEventListener('scroll', handleScroll);

      // Ensure the animation is set to the correct frame on page load
      // once the player is ready and totalFrames is available.
      lottiePlayer.addEventListener('ready', () => {
          handleScroll(); // Set initial frame based on scroll position on load
          // If you want scroll to be the default, you might need to
          // explicitly pause the animation here if it started playing due to autoplay.
          // lottiePlayer.pause();
      });

      // If the player is already ready when the script runs
       if (lottiePlayer.totalFrames && lottiePlayer.readyState === 4) { // readyState 4 means HAVE_ENOUGH_DATA
            handleScroll();
            // lottiePlayer.pause(); // Pause if scroll should be the default control
        }

    }); // End DOMContentLoaded
  </script>

</body>
</html>
